// Code generated by protoc-gen-go. DO NOT EDIT.
// source: golazy.proto

/*
Package golazy is a generated protocol buffer package.

It is generated from these files:
	golazy.proto

It has these top-level messages:
	ClientHi
	ClientLeave
	ClientReq
	ClientResp
	AckMsg
	ClientMsg
*/
package golazy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ClientHi struct {
	ClientID          string           `protobuf:"bytes,1,opt,name=ClientID" json:"ClientID,omitempty"`
	ClientName        string           `protobuf:"bytes,2,opt,name=ClientName" json:"ClientName,omitempty"`
	ClientVersion     string           `protobuf:"bytes,3,opt,name=ClientVersion" json:"ClientVersion,omitempty"`
	ClientDescription string           `protobuf:"bytes,4,opt,name=ClientDescription" json:"ClientDescription,omitempty"`
	AllowedCommandIDs map[int64]string `protobuf:"bytes,5,rep,name=AllowedCommandIDs" json:"AllowedCommandIDs,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp         int64            `protobuf:"varint,6,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *ClientHi) Reset()                    { *m = ClientHi{} }
func (m *ClientHi) String() string            { return proto.CompactTextString(m) }
func (*ClientHi) ProtoMessage()               {}
func (*ClientHi) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClientHi) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *ClientHi) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *ClientHi) GetClientVersion() string {
	if m != nil {
		return m.ClientVersion
	}
	return ""
}

func (m *ClientHi) GetClientDescription() string {
	if m != nil {
		return m.ClientDescription
	}
	return ""
}

func (m *ClientHi) GetAllowedCommandIDs() map[int64]string {
	if m != nil {
		return m.AllowedCommandIDs
	}
	return nil
}

func (m *ClientHi) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ClientLeave struct {
	ClientID  string `protobuf:"bytes,1,opt,name=ClientID" json:"ClientID,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *ClientLeave) Reset()                    { *m = ClientLeave{} }
func (m *ClientLeave) String() string            { return proto.CompactTextString(m) }
func (*ClientLeave) ProtoMessage()               {}
func (*ClientLeave) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClientLeave) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *ClientLeave) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ClientReq struct {
	ReqID     string `protobuf:"bytes,1,opt,name=ReqID" json:"ReqID,omitempty"`
	From      string `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
	To        string `protobuf:"bytes,3,opt,name=To" json:"To,omitempty"`
	CommandID int64  `protobuf:"varint,4,opt,name=CommandID" json:"CommandID,omitempty"`
	Content   string `protobuf:"bytes,5,opt,name=Content" json:"Content,omitempty"`
	Timestamp int64  `protobuf:"varint,6,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *ClientReq) Reset()                    { *m = ClientReq{} }
func (m *ClientReq) String() string            { return proto.CompactTextString(m) }
func (*ClientReq) ProtoMessage()               {}
func (*ClientReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClientReq) GetReqID() string {
	if m != nil {
		return m.ReqID
	}
	return ""
}

func (m *ClientReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ClientReq) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ClientReq) GetCommandID() int64 {
	if m != nil {
		return m.CommandID
	}
	return 0
}

func (m *ClientReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ClientReq) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ClientResp struct {
	RespID    string `protobuf:"bytes,1,opt,name=RespID" json:"RespID,omitempty"`
	From      string `protobuf:"bytes,2,opt,name=From" json:"From,omitempty"`
	To        string `protobuf:"bytes,3,opt,name=To" json:"To,omitempty"`
	Content   string `protobuf:"bytes,4,opt,name=Content" json:"Content,omitempty"`
	ErrCode   int32  `protobuf:"varint,5,opt,name=ErrCode" json:"ErrCode,omitempty"`
	ErrMsg    string `protobuf:"bytes,6,opt,name=ErrMsg" json:"ErrMsg,omitempty"`
	Timestamp int64  `protobuf:"varint,7,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *ClientResp) Reset()                    { *m = ClientResp{} }
func (m *ClientResp) String() string            { return proto.CompactTextString(m) }
func (*ClientResp) ProtoMessage()               {}
func (*ClientResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ClientResp) GetRespID() string {
	if m != nil {
		return m.RespID
	}
	return ""
}

func (m *ClientResp) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ClientResp) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ClientResp) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ClientResp) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *ClientResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ClientResp) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type AckMsg struct {
	MsgID     string `protobuf:"bytes,1,opt,name=MsgID" json:"MsgID,omitempty"`
	IsOk      bool   `protobuf:"varint,2,opt,name=IsOk" json:"IsOk,omitempty"`
	Msg       string `protobuf:"bytes,3,opt,name=Msg" json:"Msg,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=Timestamp" json:"Timestamp,omitempty"`
}

func (m *AckMsg) Reset()                    { *m = AckMsg{} }
func (m *AckMsg) String() string            { return proto.CompactTextString(m) }
func (*AckMsg) ProtoMessage()               {}
func (*AckMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AckMsg) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

func (m *AckMsg) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *AckMsg) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AckMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ClientMsg struct {
	// Types that are valid to be assigned to Message:
	//	*ClientMsg_Hi
	//	*ClientMsg_Leave
	//	*ClientMsg_Req
	//	*ClientMsg_Resp
	//	*ClientMsg_Ack
	Message isClientMsg_Message `protobuf_oneof:"Message"`
	MsgID   string              `protobuf:"bytes,6,opt,name=MsgID" json:"MsgID,omitempty"`
}

func (m *ClientMsg) Reset()                    { *m = ClientMsg{} }
func (m *ClientMsg) String() string            { return proto.CompactTextString(m) }
func (*ClientMsg) ProtoMessage()               {}
func (*ClientMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isClientMsg_Message interface {
	isClientMsg_Message()
}

type ClientMsg_Hi struct {
	Hi *ClientHi `protobuf:"bytes,1,opt,name=Hi,oneof"`
}
type ClientMsg_Leave struct {
	Leave *ClientLeave `protobuf:"bytes,2,opt,name=Leave,oneof"`
}
type ClientMsg_Req struct {
	Req *ClientReq `protobuf:"bytes,3,opt,name=Req,oneof"`
}
type ClientMsg_Resp struct {
	Resp *ClientResp `protobuf:"bytes,4,opt,name=Resp,oneof"`
}
type ClientMsg_Ack struct {
	Ack *AckMsg `protobuf:"bytes,5,opt,name=Ack,oneof"`
}

func (*ClientMsg_Hi) isClientMsg_Message()    {}
func (*ClientMsg_Leave) isClientMsg_Message() {}
func (*ClientMsg_Req) isClientMsg_Message()   {}
func (*ClientMsg_Resp) isClientMsg_Message()  {}
func (*ClientMsg_Ack) isClientMsg_Message()   {}

func (m *ClientMsg) GetMessage() isClientMsg_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *ClientMsg) GetHi() *ClientHi {
	if x, ok := m.GetMessage().(*ClientMsg_Hi); ok {
		return x.Hi
	}
	return nil
}

func (m *ClientMsg) GetLeave() *ClientLeave {
	if x, ok := m.GetMessage().(*ClientMsg_Leave); ok {
		return x.Leave
	}
	return nil
}

func (m *ClientMsg) GetReq() *ClientReq {
	if x, ok := m.GetMessage().(*ClientMsg_Req); ok {
		return x.Req
	}
	return nil
}

func (m *ClientMsg) GetResp() *ClientResp {
	if x, ok := m.GetMessage().(*ClientMsg_Resp); ok {
		return x.Resp
	}
	return nil
}

func (m *ClientMsg) GetAck() *AckMsg {
	if x, ok := m.GetMessage().(*ClientMsg_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *ClientMsg) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientMsg) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClientMsg_OneofMarshaler, _ClientMsg_OneofUnmarshaler, _ClientMsg_OneofSizer, []interface{}{
		(*ClientMsg_Hi)(nil),
		(*ClientMsg_Leave)(nil),
		(*ClientMsg_Req)(nil),
		(*ClientMsg_Resp)(nil),
		(*ClientMsg_Ack)(nil),
	}
}

func _ClientMsg_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientMsg)
	// Message
	switch x := m.Message.(type) {
	case *ClientMsg_Hi:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hi); err != nil {
			return err
		}
	case *ClientMsg_Leave:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Leave); err != nil {
			return err
		}
	case *ClientMsg_Req:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Req); err != nil {
			return err
		}
	case *ClientMsg_Resp:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Resp); err != nil {
			return err
		}
	case *ClientMsg_Ack:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClientMsg.Message has unexpected type %T", x)
	}
	return nil
}

func _ClientMsg_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientMsg)
	switch tag {
	case 1: // Message.Hi
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientHi)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMsg_Hi{msg}
		return true, err
	case 2: // Message.Leave
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientLeave)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMsg_Leave{msg}
		return true, err
	case 3: // Message.Req
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientReq)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMsg_Req{msg}
		return true, err
	case 4: // Message.Resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClientResp)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMsg_Resp{msg}
		return true, err
	case 5: // Message.Ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AckMsg)
		err := b.DecodeMessage(msg)
		m.Message = &ClientMsg_Ack{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClientMsg_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClientMsg)
	// Message
	switch x := m.Message.(type) {
	case *ClientMsg_Hi:
		s := proto.Size(x.Hi)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMsg_Leave:
		s := proto.Size(x.Leave)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMsg_Req:
		s := proto.Size(x.Req)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMsg_Resp:
		s := proto.Size(x.Resp)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientMsg_Ack:
		s := proto.Size(x.Ack)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ClientHi)(nil), "golazy.ClientHi")
	proto.RegisterType((*ClientLeave)(nil), "golazy.ClientLeave")
	proto.RegisterType((*ClientReq)(nil), "golazy.ClientReq")
	proto.RegisterType((*ClientResp)(nil), "golazy.ClientResp")
	proto.RegisterType((*AckMsg)(nil), "golazy.AckMsg")
	proto.RegisterType((*ClientMsg)(nil), "golazy.ClientMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	MessageLoop(ctx context.Context, opts ...grpc.CallOption) (Node_MessageLoopClient, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) MessageLoop(ctx context.Context, opts ...grpc.CallOption) (Node_MessageLoopClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Node_serviceDesc.Streams[0], c.cc, "/golazy.Node/MessageLoop", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeMessageLoopClient{stream}
	return x, nil
}

type Node_MessageLoopClient interface {
	Send(*ClientMsg) error
	Recv() (*ClientMsg, error)
	grpc.ClientStream
}

type nodeMessageLoopClient struct {
	grpc.ClientStream
}

func (x *nodeMessageLoopClient) Send(m *ClientMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nodeMessageLoopClient) Recv() (*ClientMsg, error) {
	m := new(ClientMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Node service

type NodeServer interface {
	MessageLoop(Node_MessageLoopServer) error
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_MessageLoop_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NodeServer).MessageLoop(&nodeMessageLoopServer{stream})
}

type Node_MessageLoopServer interface {
	Send(*ClientMsg) error
	Recv() (*ClientMsg, error)
	grpc.ServerStream
}

type nodeMessageLoopServer struct {
	grpc.ServerStream
}

func (x *nodeMessageLoopServer) Send(m *ClientMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nodeMessageLoopServer) Recv() (*ClientMsg, error) {
	m := new(ClientMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "golazy.Node",
	HandlerType: (*NodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessageLoop",
			Handler:       _Node_MessageLoop_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "golazy.proto",
}

func init() { proto.RegisterFile("golazy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x9b, 0xbf, 0xdd, 0x9e, 0xe8, 0xb2, 0x1d, 0x97, 0x25, 0x14, 0x91, 0x12, 0x14, 0x0b,
	0x4a, 0x91, 0x78, 0xa3, 0xde, 0xd5, 0xb6, 0x9a, 0xc2, 0x76, 0x85, 0xa1, 0x7a, 0x9f, 0x6d, 0x87,
	0x12, 0xda, 0x64, 0xd2, 0x4c, 0x5c, 0xa9, 0xaf, 0xe2, 0x5b, 0xf8, 0x2e, 0xbe, 0x88, 0x4f, 0x20,
	0x73, 0x26, 0x69, 0x9b, 0x44, 0x96, 0xbd, 0xda, 0xf3, 0x9d, 0xf9, 0x76, 0xce, 0x2f, 0xdf, 0x19,
	0x0a, 0x8f, 0xd6, 0x7c, 0x1b, 0xfe, 0xdc, 0x0f, 0xd3, 0x8c, 0xe7, 0x9c, 0xd8, 0x4a, 0x79, 0x7f,
	0x74, 0x38, 0x1b, 0x6f, 0x23, 0x96, 0xe4, 0x41, 0x44, 0x7a, 0x65, 0x3d, 0x9b, 0xb8, 0x5a, 0x5f,
	0x1b, 0x74, 0xe8, 0x41, 0x93, 0x67, 0x00, 0xaa, 0xbe, 0x09, 0x63, 0xe6, 0xea, 0x78, 0x7a, 0xd2,
	0x21, 0xcf, 0xe1, 0xb1, 0x52, 0xdf, 0x58, 0x26, 0x22, 0x9e, 0xb8, 0x06, 0x5a, 0xaa, 0x4d, 0xf2,
	0x1a, 0xba, 0xaa, 0x31, 0x61, 0x62, 0x99, 0x45, 0x69, 0x2e, 0x9d, 0x26, 0x3a, 0x9b, 0x07, 0xe4,
	0x2b, 0x74, 0x47, 0xdb, 0x2d, 0xff, 0xc1, 0x56, 0x63, 0x1e, 0xc7, 0x61, 0xb2, 0x9a, 0x4d, 0x84,
	0x6b, 0xf5, 0x8d, 0x81, 0xe3, 0xbf, 0x1c, 0x16, 0x9f, 0x53, 0xc2, 0x0f, 0x1b, 0xce, 0x69, 0x92,
	0x67, 0x7b, 0xda, 0xbc, 0x81, 0x3c, 0x85, 0xce, 0x22, 0x8a, 0x99, 0xc8, 0xc3, 0x38, 0x75, 0xed,
	0xbe, 0x36, 0x30, 0xe8, 0xb1, 0xd1, 0x9b, 0xc0, 0xd5, 0xff, 0xaf, 0x22, 0x17, 0x60, 0x6c, 0xd8,
	0x1e, 0x93, 0x31, 0xa8, 0x2c, 0xc9, 0x25, 0x58, 0x77, 0xe1, 0xf6, 0x7b, 0x99, 0x87, 0x12, 0x1f,
	0xf4, 0x77, 0x9a, 0xf7, 0x19, 0x1c, 0x45, 0x76, 0xcd, 0xc2, 0x3b, 0x76, 0x6f, 0xb2, 0x15, 0x1c,
	0xbd, 0x86, 0xe3, 0xfd, 0xd2, 0xa0, 0xa3, 0xac, 0x94, 0xed, 0xe4, 0x40, 0xca, 0x76, 0x87, 0x4b,
	0x94, 0x20, 0x04, 0xcc, 0x4f, 0x19, 0x8f, 0x0b, 0x0a, 0xac, 0xc9, 0x39, 0xe8, 0x0b, 0x5e, 0x2c,
	0x41, 0x5f, 0x70, 0x39, 0xe5, 0xf0, 0x3d, 0x98, 0xb8, 0x41, 0x8f, 0x0d, 0xe2, 0x42, 0x7b, 0xcc,
	0x93, 0x9c, 0x25, 0xb9, 0x6b, 0xe1, 0xbf, 0x94, 0xf2, 0xfe, 0xb0, 0xbc, 0xdf, 0x5a, 0xf9, 0x2c,
	0x28, 0x13, 0x29, 0xb9, 0x02, 0x5b, 0xfe, 0x3d, 0xf0, 0x15, 0xea, 0x41, 0x80, 0x27, 0x08, 0x66,
	0x15, 0xc1, 0x85, 0xf6, 0x34, 0xcb, 0xc6, 0x7c, 0xc5, 0x10, 0xce, 0xa2, 0xa5, 0x94, 0xf3, 0xa6,
	0x59, 0x36, 0x17, 0x6b, 0x24, 0xeb, 0xd0, 0x42, 0x55, 0xa1, 0xdb, 0x75, 0xe8, 0x5b, 0xb0, 0x47,
	0xcb, 0x8d, 0xf4, 0x5d, 0x82, 0x35, 0x17, 0xeb, 0x63, 0x9c, 0x28, 0x24, 0xed, 0x4c, 0x7c, 0xd9,
	0x20, 0xed, 0x19, 0xc5, 0x5a, 0xee, 0x5e, 0x8e, 0x51, 0xb8, 0x46, 0x63, 0x86, 0x59, 0x9f, 0xf1,
	0xf7, 0xb0, 0x36, 0xe9, 0xf5, 0x40, 0x0f, 0x22, 0x1c, 0xe2, 0xf8, 0x17, 0xf5, 0x97, 0x1b, 0xb4,
	0xa8, 0x1e, 0x44, 0xe4, 0x15, 0x58, 0xf8, 0x56, 0x70, 0xac, 0xe3, 0x3f, 0xa9, 0xda, 0xf0, 0x28,
	0x68, 0x51, 0xe5, 0x21, 0x2f, 0xc0, 0xa0, 0x6c, 0x87, 0x38, 0x8e, 0xdf, 0xad, 0x5a, 0x29, 0xdb,
	0x05, 0x2d, 0x2a, 0xcf, 0xc9, 0x00, 0x4c, 0xb9, 0x01, 0xc4, 0x73, 0x7c, 0x52, 0xf7, 0x89, 0x34,
	0x68, 0x51, 0x74, 0x10, 0x0f, 0x8c, 0xd1, 0x72, 0x83, 0xf9, 0x3a, 0xfe, 0x79, 0x69, 0x54, 0x31,
	0xc9, 0xdb, 0x46, 0xcb, 0xcd, 0x31, 0x2d, 0xfb, 0x24, 0xad, 0x8f, 0x1d, 0x68, 0xcf, 0x99, 0x10,
	0xe1, 0x9a, 0xf9, 0x23, 0x30, 0x6f, 0xe4, 0x5a, 0xde, 0x83, 0x53, 0xb4, 0xae, 0x39, 0x4f, 0x49,
	0x8d, 0x6f, 0x2e, 0xd6, 0xbd, 0x66, 0xcb, 0x6b, 0x0d, 0xb4, 0x37, 0xda, 0xad, 0x8d, 0x3f, 0x4f,
	0x6f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9e, 0x63, 0xfd, 0x06, 0xae, 0x04, 0x00, 0x00,
}
